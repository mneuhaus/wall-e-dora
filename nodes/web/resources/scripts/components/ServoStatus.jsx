import React, { useState, useRef, useEffect } from 'react';
import { useAppContext } from '../contexts/AppContext';
import { Link } from 'react-router-dom';
import node from '../Node';

const ServoStatus = () => {
  const { availableServos } = useAppContext();
  const [servos, setServos] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  
  // Direct connection to node events for more reliable updates
  useEffect(() => {
    const unsubscribe = node.on('servo_status', (event) => {
      if (event && event.value) {
        setServos(event.value);
      }
    });
    
    // Request servo status on mount
    node.emit('SCAN', []);
    
    return unsubscribe;
  }, []);
  
  // Use either direct event data or context data
  const servoData = servos.length > 0 ? servos : (availableServos || []);
  
  const iconColor = servoData.length > 0 ? '#69ac5a' : '#15130e';
  
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
    // Request fresh data when opening menu
    if (!isOpen) {
      node.emit('SCAN', []);
    }
  };
  
  return (
    <div className="dropdown" ref={dropdownRef}>
      <button 
        className="transparent circle" 
        onClick={toggleDropdown}
        aria-label="Servos"
        aria-haspopup="true"
        aria-expanded={isOpen}
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          viewBox="0 0 48 60" 
          style={{ width: '24px', height: '24px' }}
          fill={iconColor}
        >
          <g>
            <g transform="translate(-60)">
              <path 
                d="M 24.582031 7.0136719 C 24.388862 7.0090792 24.195314 7.0193314 24.001953 7.0429688 C 23.486325 7.1060017 22.976033 7.2700842 22.5 7.5449219 C 21.227768 8.2794457 20.51559 9.621881 20.507812 11 L 2 11 A 1.0001 1.0001 0 0 0 1 12 L 1 36 A 1.0001 1.0001 0 0 0 2 37 L 34.886719 37 L 36.035156 38.990234 C 37.134507 40.894365 39.59587 41.554428 41.5 40.455078 C 42.772232 39.720554 43.484411 38.378119 43.492188 37 L 46 37 A 1.000095 1.000095 0 0 0 47 36 L 47 12 A 1.000095 1.000095 0 0 0 46 11 L 29.113281 11 L 27.964844 9.0097656 C 27.243395 7.7601801 25.934218 7.0458203 24.582031 7.0136719 z M 24.642578 9.0039062 C 24.769976 9.0122746 24.896815 9.0335246 25.019531 9.0664062 C 25.510395 9.1979327 25.951098 9.5224978 26.232422 10.009766 L 32.410156 20.710938 A 1.0001 1.0001 0 0 0 32.957031 21.160156 C 33.649069 21.392922 34.232087 21.867974 34.597656 22.5 C 34.962223 23.132602 35.08389 23.874136 34.939453 24.589844 A 1.0001 1.0001 0 0 0 35.052734 25.289062 L 41.232422 35.990234 C 41.795072 36.964767 41.47453 38.160008 40.5 38.722656 C 39.525465 39.285304 38.330226 38.964769 37.767578 37.990234 L 36.296875 35.445312 L 31.589844 27.289062 A 1.0001 1.0001 0 0 0 31.042969 26.839844 C 30.350929 26.607076 29.767912 26.132025 29.402344 25.5 C 29.037777 24.867398 28.91611 24.125864 29.060547 23.410156 A 1.0001 1.0001 0 0 0 28.947266 22.710938 L 22.767578 12.009766 C 22.697247 11.887949 22.640835 11.761813 22.597656 11.634766 C 22.295402 10.745434 22.647282 9.7696608 23.5 9.2773438 C 23.86545 9.0663506 24.260385 8.9788011 24.642578 9.0039062 z M 24.472656 10.009766 C 24.31146 10.013952 24.149467 10.058237 24 10.144531 C 23.521707 10.420673 23.358623 11.031472 23.634766 11.509766 C 23.910908 11.988059 24.521707 12.151144 25 11.875 C 25.478293 11.598859 25.641377 10.98806 25.365234 10.509766 C 25.175387 10.180939 24.827288 10.000555 24.472656 10.009766 z M 25.972656 12.607422 C 25.81146 12.611609 25.649467 12.655893 25.5 12.742188 C 25.021707 13.018329 24.858623 13.629128 25.134766 14.107422 C 25.410908 14.585714 26.021707 14.750751 26.5 14.474609 C 26.978293 14.198466 27.141377 13.585716 26.865234 13.107422 C 26.675387 12.778595 26.327288 12.598211 25.972656 12.607422 z M 3 13 L 21.029297 13 C 21.0312 13.003318 21.033242 13.006451 21.035156 13.009766 L 25.072266 20 C 23.661082 22.443859 23.637644 25.469611 25.039062 27.943359 C 26.46203 30.455145 29.128457 32.000131 32 32 L 33.732422 35 L 3 35 L 3 13 z M 30.267578 13 L 45 13 L 45 35 L 42.970703 35 C 42.9688 34.996682 42.966758 34.993549 42.964844 34.990234 L 38.927734 28 C 40.366488 25.508327 40.359703 22.418864 38.886719 19.927734 C 37.44208 17.484532 34.814255 15.999577 32 16 L 30.267578 13 z M 27.472656 15.205078 C 27.31146 15.209265 27.149467 15.253549 27 15.339844 C 26.521707 15.615986 26.358623 16.226786 26.634766 16.705078 C 26.910908 17.183371 27.521707 17.348407 28 17.072266 C 28.478293 16.796122 28.641377 16.183371 28.365234 15.705078 C 28.175387 15.376252 27.827288 15.195867 27.472656 15.205078 z M 28.972656 17.804688 C 28.81146 17.808874 28.649467 17.851206 28.5 17.9375 C 28.021707 18.213643 27.858623 18.826396 28.134766 19.304688 C 28.410908 19.78298 29.021707 19.946065 29.5 19.669922 C 29.978293 19.39378 30.141377 18.782979 29.865234 18.304688 C 29.675387 17.975862 29.327288 17.795477 28.972656 17.804688 z M 33.228516 18.126953 C 34.854705 18.466475 36.293096 19.47232 37.164062 20.945312 C 38.056146 22.454018 38.230393 24.249485 37.699219 25.869141 L 36.910156 24.503906 C 37.015948 23.46453 36.855746 22.412148 36.330078 21.5 C 35.803293 20.589251 34.971779 19.926211 34.019531 19.498047 L 33.228516 18.126953 z M 31.947266 22 C 31.624873 22.008373 31.298933 22.094989 31 22.267578 C 30.043415 22.819863 29.715293 24.043415 30.267578 25 C 30.819862 25.956585 32.043415 26.284707 33 25.732422 C 33.956586 25.180137 34.284707 23.956585 33.732422 23 C 33.352726 22.342348 32.656529 21.981579 31.947266 22 z M 26.300781 22.130859 L 27.089844 23.496094 C 26.984052 24.53547 27.144254 25.587853 27.669922 26.5 C 28.196706 27.41075 29.028222 28.073788 29.980469 28.501953 L 30.769531 29.869141 C 29.105146 29.520448 27.640817 28.477765 26.779297 26.957031 C 25.934304 25.465471 25.781152 23.713202 26.300781 22.130859 z M 35.021484 28.195312 C 34.844609 28.191349 34.664413 28.235154 34.5 28.330078 C 34.021707 28.606221 33.858626 29.217023 34.134766 29.695312 C 34.410906 30.1736 35.021707 30.338643 35.5 30.0625 C 35.978293 29.786358 36.141374 29.173602 35.865234 28.695312 C 35.684018 28.381436 35.359156 28.202879 35.021484 28.195312 z M 36.472656 30.794922 C 36.31146 30.799108 36.149467 30.84144 36 30.927734 C 35.521707 31.203877 35.358626 31.816632 35.634766 32.294922 C 35.910906 32.773209 36.521707 32.936299 37 32.660156 C 37.478293 32.384014 37.641374 31.77321 37.365234 31.294922 C 37.175388 30.966098 36.827288 30.785712 36.472656 30.794922 z M 37.972656 33.392578 C 37.81146 33.396764 37.649467 33.439096 37.5 33.525391 C 37.021707 33.801533 36.858627 34.41429 37.134766 34.892578 C 37.410907 35.370867 38.021707 35.533956 38.5 35.257812 C 38.978293 34.98167 39.141374 34.370866 38.865234 33.892578 C 38.675389 33.563755 38.327289 33.383369 37.972656 33.392578 z M 39.472656 35.990234 C 39.311459 35.994421 39.149467 36.038705 39 36.125 C 38.521707 36.401142 38.358626 37.011946 38.634766 37.490234 C 38.910906 37.968523 39.521707 38.131611 40 37.855469 C 40.47829 37.579326 40.641374 36.968523 40.365234 36.490234 C 40.175388 36.161411 39.82729 35.981025 39.472656 35.990234 z " 
                transform="translate(60)" 
              />
            </g>
          </g>
        </svg>
        {servoData.length > 0 && (
          <span className="badge amber">{servoData.length}</span>
        )}
      </button>
      
      {isOpen && (
        <div 
          className="menu"
          style={{
            top: dropdownRef.current ? dropdownRef.current.getBoundingClientRect().bottom + 'px' : '50px',
            left: dropdownRef.current ? dropdownRef.current.getBoundingClientRect().left + 'px' : 'auto',
            right: 'auto'
          }}
        >
          {servoData.length > 0 ? (
            servoData.map(servo => (
              <Link 
                key={servo.id} 
                to={`/servo/${servo.id}`}
                className="item"
                onClick={() => setIsOpen(false)}
              >
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  viewBox="0 0 48 60" 
                  style={{ width: '24px', height: '24px' }}
                  fill="#69ac5a"
                >
                  <g>
                    <g transform="translate(-60)">
                      <path 
                        d="M 24.582031 7.0136719 C 24.388862 7.0090792 24.195314 7.0193314 24.001953 7.0429688 C 23.486325 7.1060017 22.976033 7.2700842 22.5 7.5449219 C 21.227768 8.2794457 20.51559 9.621881 20.507812 11 L 2 11 A 1.0001 1.0001 0 0 0 1 12 L 1 36 A 1.0001 1.0001 0 0 0 2 37 L 34.886719 37 L 36.035156 38.990234 C 37.134507 40.894365 39.59587 41.554428 41.5 40.455078 C 42.772232 39.720554 43.484411 38.378119 43.492188 37 L 46 37 A 1.000095 1.000095 0 0 0 47 36 L 47 12 A 1.000095 1.000095 0 0 0 46 11 L 29.113281 11 L 27.964844 9.0097656 C 27.243395 7.7601801 25.934218 7.0458203 24.582031 7.0136719 z" 
                        transform="translate(60)" 
                      />
                    </g>
                  </g>
                </svg>
                <span className="text">
                  <div>Servo #{servo.id}</div>
                  <small>Position: {servo.position || 0}</small>
                </span>
              </Link>
            ))
          ) : (
            <div className="item disabled">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 48 60" 
                style={{ width: '24px', height: '24px' }}
                fill="#15130e"
              >
                <g>
                  <g transform="translate(-60)">
                    <path 
                      d="M 24.582031 7.0136719 C 24.388862 7.0090792 24.195314 7.0193314 24.001953 7.0429688 C 23.486325 7.1060017 22.976033 7.2700842 22.5 7.5449219 C 21.227768 8.2794457 20.51559 9.621881 20.507812 11 L 2 11 A 1.0001 1.0001 0 0 0 1 12 L 1 36 A 1.0001 1.0001 0 0 0 2 37 L 34.886719 37 L 36.035156 38.990234 C 37.134507 40.894365 39.59587 41.554428 41.5 40.455078 C 42.772232 39.720554 43.484411 38.378119 43.492188 37 L 46 37 A 1.000095 1.000095 0 0 0 47 36 L 47 12 A 1.000095 1.000095 0 0 0 46 11 L 29.113281 11 L 27.964844 9.0097656 C 27.243395 7.7601801 25.934218 7.0458203 24.582031 7.0136719 z" 
                      transform="translate(60)" 
                    />
                  </g>
                </g>
              </svg>
              <span>No servos connected</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ServoStatus;